import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from tensorflow.python.keras.layers import Dense
from tensorflow.python.keras.metrics import Recall
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.optimizer_v1 import Adam


def get_RandomForestClassifier_model():
    return RandomForestClassifier(n_estimators=100)


def get_feedforward_neuralnetwork_model():
    model = Sequential()
    model.add(Dense(128, input_dim=256, activation='relu'))  # input_dim matches the length of the feature vectors
    model.add(Dense(64, activation='relu'))
    model.add(Dense(10, activation='softmax'))  # 10 classes of malware

    # Compile the model
    model.compile(loss='categorical_crossentropy',  # use categorical_crossentropy for multi-class classification
                  optimizer='adam',
                  metrics=['accuracy', Recall()])

    return model


_model_object_ = get_feedforward_neuralnetwork_model()

################# DEFINE MODEL ARCHITECTURES ABOVE THIS LINE ###################
################# MANIPULATE MODEL BELOW #################


def get_model():
    return _model_object_


def train_model(train_features, train_labels):
    # train_labels should already be onehot_encoded at this point if using a neural network
    shape = train_features.shape
    batch_size = 32

    print("Started training model...")
    _model_object_.fit(train_features, train_labels, epochs=10, batch_size=batch_size)
    print("Done training model.")


def get_predictions(X_test):
    return _model_object_.predict(X_test)


def score_model(X, y):
    return _model_object_.score(X, y)


def evaluate_neural_network(X_test, y_test, y_predictions):
    test_loss, test_accuracy, test_recall = _model_object_.evaluate(X_test, y_test)
    print(f"Test accuracy: {test_accuracy}")
    print(f"Test recall: {test_recall}")

    predicted_classes = np.argmax(y_predictions, axis=1)
    true_labels = np.argmax(y_test, axis=1)

    print(classification_report(true_labels, predicted_classes))

import random
import os
import string

import control_flow_graph_utils
import byte_ngram_utils
import byte_histogram_utils
import data_source
import input_file_manipulation


def get_features_for_file(file_data):
    """
        file_data is object of shape (file_name, malware_id_label, lines_in_byte_representation)

        This function will provide the complete features to be used in training for a single file
    """

    return get_byte_histogram_features(file_data)


def get_control_graph_features(file_data):
    file_bytes = file_data[2]
    return control_flow_graph_utils.get_control_flow_graph(file_bytes)


def get_ngrams_features(file_data):
    file_bytes = file_data[2]
    return byte_ngram_utils.get_ngrams_for_file(file_bytes)


def get_byte_histogram_features(file_data, use_existing_features=True):

    complete_file_name = f"byte_histogram_{file_data[0]}.txt"

    if use_existing_features and complete_file_name in os.listdir(data_source.stored_features_folder):
        with open(os.path.join(data_source.stored_features_folder, complete_file_name), 'r') as f:
            byte_histogram = [int(val) for val in f.read().split(" ") if val not in string.whitespace]

    else:
        file_bytes = file_data[2]
        byte_histogram = byte_histogram_utils.create_byte_histograms(file_bytes)

        with open(os.path.join(data_source.stored_features_folder, complete_file_name), 'w') as f:
            for val in byte_histogram:
                f.write(f"{val} ")

        f.close()

    return byte_histogram


def get_features_for_n_random_files(num_of_files, use_existing_features=True):

    _folder_to_search_in_ = data_source.stored_features_folder

    all_files_labels = input_file_manipulation.get_all_files_labels()

    already_existing_features = [filename for filename in os.listdir(_folder_to_search_in_)]

    selected_files = random.sample(all_files_labels, num_of_files)

    X_data = []
    y_data = []

    for file_label in selected_files:
        info = file_label.split(',')
        file_name = info[0].replace("\"", "")
        malware_id = int(info[1])

        if use_existing_features and f"byte_histogram_{file_name}.txt" in already_existing_features:
            # print(f"features for {file_name} already exist, reading existing data...)")
            file_bytes = None
            complete_file_data = [file_name, malware_id, file_bytes]
        else:
            # print(f"features for {file_name} need to be created...)")
            complete_file_data = input_file_manipulation.get_complete_data_for_specific_file(file_label)

        file_features = get_byte_histogram_features(complete_file_data, use_existing_features)
        X_data.append(file_features)
        y_data.append(malware_id)

    return X_data, y_data

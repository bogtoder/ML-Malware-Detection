import random
import os
import string

import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns

import control_flow_graph_utils
import byte_ngram_utils
import byte_histogram_utils
import data_source
import input_file_manipulation


def get_features_for_file(file_data):
    """
        file_data is object of shape (file_name, malware_id_label, lines_in_byte_representation)

        This function will provide the complete features to be used in training for a single file
    """

    return get_byte_histogram_features(file_data)


def get_control_graph_features(file_data):
    file_bytes = file_data[2]
    return control_flow_graph_utils.get_control_flow_graph(file_bytes)


def get_ngrams_features(file_data):
    file_bytes = file_data[2]
    return byte_ngram_utils.get_ngrams_for_file(file_bytes)


def get_byte_histogram_features(file_data, use_existing_features=True):

    complete_file_name = f"byte_histogram_{file_data[0]}.txt"

    if use_existing_features and complete_file_name in os.listdir(data_source.stored_features_folder):
        with open(os.path.join(data_source.stored_features_folder, complete_file_name), 'r') as f:
            byte_histogram = [int(val) for val in f.read().split(" ") if val not in string.whitespace]

    else:
        file_bytes = file_data[2]
        byte_histogram = byte_histogram_utils.create_byte_histograms(file_bytes)

        with open(os.path.join(data_source.stored_features_folder, complete_file_name), 'w') as f:
            for val in byte_histogram:
                f.write(f"{val} ")

        f.close()

    return byte_histogram


def get_byte_frequencies_and_entropy_features(file_data, use_existing_features=True):

    complete_file_name = f"byte_freqs_and_entropy_{file_data[0]}.txt"

    if use_existing_features and complete_file_name in os.listdir(data_source.stored_features_folder):
        with open(os.path.join(data_source.stored_features_folder, complete_file_name), 'r') as f:
            byte_freqs_and_entropy = [float(val) for val in f.read().split(" ") if val not in string.whitespace]

    else:
        file_bytes = file_data[2]
        byte_freqs_and_entropy = byte_histogram_utils.create_byte_frequencies_and_entropy(file_bytes)

        if byte_freqs_and_entropy is not None:
            with open(os.path.join(data_source.stored_features_folder, complete_file_name), 'w') as f:
                for val in byte_freqs_and_entropy:
                    f.write(f"{val} ")

            f.close()

    return byte_freqs_and_entropy


def get_features_for_n_random_files(num_of_files, use_existing_features=True):

    all_files_labels = input_file_manipulation.get_all_files_labels()

    already_existing_features = [filename for filename in os.listdir(data_source.stored_features_folder)]

    num_of_infected_files = int(num_of_files * 0.9)  # we do this so that we can add benign files up to num_of_files,
                                                     # which should number at around 10% due to class distribution
    selected_infected_files = random.sample(all_files_labels, num_of_infected_files)

    num_selected_benign_files = int(num_of_files / 10) if int(num_of_files / 10) < data_source.num_benign_files \
        else data_source.num_benign_files
    selected_benign_files = input_file_manipulation.get_n_random_benign_files_complete_data(num_selected_benign_files)

    X_data = []
    y_data = []

    for file_label in selected_infected_files:
        info = file_label.split(',')
        file_name = info[0].replace("\"", "")
        malware_id = int(info[1]) - 1

        if use_existing_features and f"byte_freqs_and_entropy_{file_name}.txt" in already_existing_features:
            file_bytes = None
            complete_file_data = [file_name, malware_id, file_bytes]
        else:
            complete_file_data = input_file_manipulation.get_complete_data_for_specific_file(file_name, malware_id)

        file_features = get_byte_frequencies_and_entropy_features(complete_file_data, use_existing_features)

        if file_features is not None:
            X_data.append(file_features)
            y_data.append(malware_id)

    for complete_file_data in selected_benign_files:
        file_features = get_byte_frequencies_and_entropy_features(complete_file_data, use_existing_features)

        if file_features is not None:
            X_data.append(file_features)
            y_data.append(complete_file_data[1])

    return X_data, y_data


def display_label_distribution():
    df = pd.read_csv(data_source.train_labels)
    sample_counts = df['Class'].value_counts()

    malware_names = {
        1: "Ramnit",
        2: "Lollipop",
        3: "Kelihos_ver3",
        4: "Vundo",
        5: "Simda",
        6: "Tracur",
        7: "Kelihos_ver1",
        8: "Obfuscator.ACY",
        9: "Gatak",
        10: "Benign"
    }
    sample_counts[10] = data_source.num_benign_files
    sample_counts.index = sample_counts.index.map(malware_names)

    sns.set(style="whitegrid")

    # Create a bar plot
    plt.figure(figsize=(12, 6))
    sns.barplot(x=sample_counts.index, y=sample_counts.values, palette="viridis")

    # Add title and labels
    plt.title('Sample Distribution in Augmented BIG 2015 Dataset', fontsize=16)
    plt.ylabel('Number of Samples', fontsize=14)
    plt.xlabel('Malware Category', fontsize=14)

    # Display the plot
    plt.show()

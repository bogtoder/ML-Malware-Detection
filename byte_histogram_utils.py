import math
from collections import Counter

import numpy as np


def create_byte_histograms(hex_values, debug=False):
    if debug:
        print(f"\thex values:")
        print(hex_values)
    values = [int(hex_val, 16) for hex_val in hex_values]

    counter = Counter(values)
    byte_histograms = [counter[i] for i in range(256)]

    return np.array(byte_histograms)


def create_byte_frequencies_and_entropy(hex_values, debug=False):
    if debug:
        print(f"\thex values:")
        print(hex_values)
    values = [int(hex_val, 16) for hex_val in hex_values]

    counter = Counter(values)
    byte_histogram = [counter[i] for i in range(256)]

    try:
        total_bytes = len(hex_values)
        byte_probs = [freq / total_bytes for freq in byte_histogram]

        # Compute entropy
        entropy = -sum(p * math.log2(p) for p in byte_probs if p > 0)
        normalized_entropy = entropy / 8

        # Combine features
        features = byte_probs + [normalized_entropy]

    except:
        print(f'something happened, total_bytes = {total_bytes}')
        features = None

    return features
import random
import re

import data_source
import os


def get_file_contents(name):
    hex_data = []

    with open(name, 'r') as file:
        for line in file:
            line_without_address = line.replace("\r", "").replace("\n", "").split(" ")[1:]

            hex_values = [val for val in line_without_address if val != '??']

            hex_data.extend(hex_values)

    return hex_data


def get_benign_file_contents(name):
    hex_data = []

    with open(name, 'rb') as f:
        hexdata = f.read().hex()
        hex_data = re.findall('..', hexdata, re.ASCII)

    return hex_data


def get_existing_file_contents(file_name):
    hex_data = []

    with open(os.path.join(data_source.saved_file_data_folder, file_name), 'r') as f:
        hex_values = [val for val in f.read().split(" ")]

        hex_data.extend(hex_values)

    return hex_data


def get_n_random_files_complete_data(num_of_files, use_existing_data=True):
    already_processed_files = get_already_processed_files_names()

    all_files_list = []
    with open(data_source.train_labels) as labels_file:
        labels_file.readline()  # discard header

        for file in labels_file:
            all_files_list.extend(file)

    selected_files = random.sample(all_files_list, num_of_files)

    files_data = []

    for selected_file in selected_files:
        files_data.append(get_complete_data_for_specific_file(selected_file, already_processed_files, True))

    return files_data


def get_n_files_complete_data(num=data_source.num_files, use_existing_data=True):
    already_processed_files = get_already_processed_files_names()

    file_data = []

    with open(data_source.train_labels) as labels_file:
        labels_file.readline()  # discard header

        for i in range(num):
            row = labels_file.readline().split(',')

            file_name = row[0].replace("\"", "")
            malware_id = int(row[1])

            if use_existing_data and file_name in already_processed_files:
                file_contents_bytes = get_existing_file_contents(file_name)
            else:
                file_contents_bytes = get_file_contents(os.path.join(data_source.train_data, file_name + ".bytes"))
                save_processed_file_data(file_name, file_contents_bytes)

            data = [file_name, malware_id, file_contents_bytes]
            file_data.append(data)

    return file_data


def get_n_random_benign_files_complete_data(num=data_source.num_benign_files):
    files_data = []

    benign_files = [file for file in os.listdir(data_source.train_benign_data_folder)]
    benign_files: list[str] = random.sample(benign_files, num)

    for benign_file in benign_files:
        file_contents: list[str] = get_benign_file_contents(os.path.join(data_source.train_benign_data_folder, benign_file))
        file_contents = [b.upper() for b in file_contents]
        file_name = benign_file.replace(".exe", "").replace(".dll", "").replace(".DLL", "")

        files_data.append([file_name, 9, file_contents])

    return files_data


def get_complete_data_for_specific_file(file_name, malware_id, use_existing_data=True):
    already_processed_files = get_already_processed_files_names()

    if use_existing_data and file_name in already_processed_files:
        file_contents_bytes = get_existing_file_contents(file_name)
    else:
        file_contents_bytes = get_file_contents(os.path.join(data_source.train_data, file_name + ".bytes"))
        save_processed_file_data(file_name, file_contents_bytes)

    return [file_name, malware_id, file_contents_bytes]


def get_complete_data_for_specific_benign_file(file_name):
    malware_id = 10

    file_contents_bytes = get_benign_file_contents(os.path.join(data_source.train_benign_data_folder, file_name))

    return [file_name, malware_id, file_contents_bytes]


def get_already_processed_files_names():
    return [filename for filename in os.listdir(data_source.saved_file_data_folder)
            if filename.endswith(".txt")]


def get_all_files_labels():
    with open(data_source.train_labels) as labels_file:
        labels_file.readline()  # discard header

        return labels_file.readlines()


def save_processed_file_data(file_name, file_contents_bytes):
    with open(os.path.join(data_source.saved_file_data_folder, f"{file_name}.txt"), 'w') as output_file:
        for line in file_contents_bytes:
            output_file.write(line + ' ')
    output_file.close()
